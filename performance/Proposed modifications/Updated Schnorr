class SchnorrZK(Protocol):
    def __init__(self, builtin_cv, common_input=None):
        Protocol.__init__(self, None)        
        verifier_states = { 2:self.verifier_state2, 4:self.verifier_state4, 6:self.verifier_state6 }
        prover_states = { 0:self.prover_state0, 1:self.prover_state1, 3:self.prover_state3, 5:self.prover_state5 }

        verifier_trans = { 2:4, 4:[2,6] }
		prover_trans = { 0:1, 1:3, 3:5, 5:0 }
        # describe the parties involved and the valid transitions
        Protocol.addPartyType(self, VERIFIER, verifier_states, verifier_trans)
        Protocol.addPartyType(self, PROVER, prover_states, prover_trans, True)

        self.group = ECGroup(builtin_cv)
        #db = {}
        Protocol.setSubclassVars(self, self.group) #, db)
        
    # PROVER states
	def prover_state0(self):
		x = self.group.random()
		g = self.group.random(G)
		Protocol.store(self, ('g',g)	, ('x',x))
		Protocol.setState(self, 1) 
		return {'g':g, 'y':g ** x}

    def prover_state1(self):
		(g, x) = Protocol.get(self, ['g', 'x'])
		r = self.group.random()
		t = g ** r
		
		print('prover: ',"hello to verifier.")
		Protocol.store(self, ('r',r))
		Protocol.setState(self, 3) 
		return {'t':t}

    def prover_state3( self, input):
        print("state3 => ", input)
        (r, x, c) = Protocol.get(self, ['r', 'x', 'c'])
        s0 = r + c0 * x
		s1 = r + c1 * x
        Protocol.setState(self, 5)
        return {'s0':s0}


    def prover_state5( self, input ):
        print("state5 => ", input)
        result = input.split(':')[1]
        if result == 'ACCEPTED': Protocol.setState(self, None)
        else: Protocol.setState(self, 0); return 'REPEAT'
        return None


    # VERIFIER states
    def verifier_state2(self, input):
        #print("state2 received => ", input)
        # compute challenge c and send to prover
        c0 =  getRandomBits(10) #Uses the OpenSSL PRNG for random bits
        print("state2 generate c0 :=", c0)
        Protocol.store(self, ('c0',c0))
		
		c1 = getRandomBits(10)
		print("state2 generate c1 :=", c1)
	    Protocol.store(self, ('c1',c1))

		b = getRandomBits(1)
		print("state2 generate b :=", b)
	    Protocol.store(self, ('b',b))

        Protocol.setState(self, 4)        
        return {'c0':c0, 'c1':c1}


    def verifier_state4( self, input ):
        (t,g,y,c0,c1,s0,s1,b) = Protocol.get(self, ['t','g','y','c0','c1','s0', 's1'; 'b'])
        print("state4: s0 :=", s0)
		print("state4: s1 :=", s1)
		print("state4: b :=", b)


        if (b = 0) :
			if (g ** s0 == t * (y ** c0)) :
				print("SUCCESSFUL VERIFICATION!!!")
				output = "verifier : ACCEPTED!"
			else:
				print("FAILED TO VERIFY!!!")            
				output = "verifier : FAILED!"
				
        if (b = 1) :
			if (g ** s1 == t * (y ** c1)) :
				print("SUCCESSFUL VERIFICATION!!!")
				output = "verifier : ACCEPTED!"
			else:
				print("FAILED TO VERIFY!!!")            
				output = "verifier : FAILED!"
				
		else:
			print("FAILED TO VERIFY! Incorrect value of b")            
			output = "verifier : FAILED!"

        Protocol.setState(self, 6)
        return output

    
    def verifier_state6(self, input ):
        print("state6: => ", input
        Protocol.setState(self, None)
        return None
